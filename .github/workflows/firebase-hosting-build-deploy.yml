# Simple workflow for deploying static content to GitHub Pages
name: Build and Deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths-ignore:
      - "*.md"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

    
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "fssou"
  cancel-in-progress: false

env:
  artifact-name: fssou
  build-output-dir: .output

jobs:
  build-deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .output
            .nuxt
          key: ${{ runner.os }}-nuxt-build-${{ hashFiles(env.build-output-dir) }}
          restore-keys: |
            ${{ runner.os }}-nuxt-build-
      - name: Dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build the application
        env:
          NODE_ENV: production
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_FRANCL_IN }}
          workload_identity_provider: ${{ secrets.FIREBASE_WORKLOAD_IDENTITY_PROVIDER_FRANCL_IN }}
          create_credentials_file: true
      - id: deployment
        run: npx firebase-tools@latest deploy
