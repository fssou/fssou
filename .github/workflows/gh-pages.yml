# Simple workflow for deploying static content to GitHub Pages
name: Build and Deploy Github Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  repo-basedir-ghpages: gh-pages
  artifact_name: github-pages-fssou
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        working-directory: ${{ env.repo-basedir-ghpages }}
        run: |
          if [ -f "${{ github.workspace }}/${{ env.repo-basedir-ghpages }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/${{ env.repo-basedir-ghpages }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.repo-basedir-ghpages }}
      - name: Setup Pages
        id: setup-pages
        uses: actions/configure-pages@v3
        with:
          generator_config_file: ${{ env.repo-basedir-ghpages }}/nuxt.config.js
          static_site_generator: nuxt
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .output
            .nuxt
          key: ${{ runner.os }}-nuxt-build-${{ hashFiles('.output') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-build-
      - name: Dependencies
        working-directory: ${{ env.repo-basedir-ghpages }}
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build the application
        working-directory: ${{ env.repo-basedir-ghpages }}
        env:
          BASE_PATH: ${{ steps.setup-pages.outputs.base_path }}
        run: ${{ steps.detect-package-manager.outputs.manager }} run generate
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.repo-basedir-ghpages }}/.output
  deploy:
    name: Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
        with:
          artifact_name: ${{ env.artifact_name }}
